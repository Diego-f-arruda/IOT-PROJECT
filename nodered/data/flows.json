[
    {
        "id": "d7dab27f55a5d58b",
        "type": "tab",
        "label": "IOT => MQTT => DB => WS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "137c847c0940eaf0",
        "type": "tab",
        "label": "IOT - HTTP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b5c44f3e0eefb409",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7b462fca6d72e984",
        "type": "mongodb4-client",
        "name": "ConectionMongoDB",
        "protocol": "mongodb",
        "hostname": "mongo",
        "port": "27017",
        "dbName": "iot-project",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "6b421670c603882b",
        "type": "mqtt in",
        "z": "d7dab27f55a5d58b",
        "name": "Device Info",
        "topic": "device/+/info",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b5c44f3e0eefb409",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 120,
        "wires": [
            [
                "3e268b85f88ea872"
            ]
        ]
    },
    {
        "id": "b8e294567e0a7dde",
        "type": "debug",
        "z": "d7dab27f55a5d58b",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 780,
        "wires": []
    },
    {
        "id": "4d090775cb62b833",
        "type": "function",
        "z": "d7dab27f55a5d58b",
        "name": "Parse info => DeviceUpsert + WS",
        "func": "const deviceId = msg.payload.device_id;\nif(!deviceId) return null\n\nmsg.collection = \"devices\";\nmsg.operation = \"updateOne\";\n\nconst update = {\n    $set: {\n        device_id: deviceId,\n        model: msg.payload.model || null,\n        firmware: msg.payload.firmware || null,\n        ip_address: msg.payload.ip_address || null,\n        location: msg.payload.location || null,\n        update_at: new Date(),\n        status:{\n            last_info_ts: new Date(),\n        },\n        raw: JSON.stringify(msg.payload)\n    },\n    $setOnInsert: { created_at: new Date(), _id: msg.payload._id }\n}\n\nmsg.payload = [{ device_id: deviceId}, update, { upsert: true }];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "e54a84efec4a1c08"
            ]
        ]
    },
    {
        "id": "e54a84efec4a1c08",
        "type": "mongodb4",
        "z": "d7dab27f55a5d58b",
        "clientNode": "7b462fca6d72e984",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Device",
        "x": 1310,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3e268b85f88ea872",
        "type": "uuid",
        "z": "d7dab27f55a5d58b",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 310,
        "y": 120,
        "wires": [
            [
                "4d090775cb62b833"
            ]
        ]
    },
    {
        "id": "a912bd595e41fc31",
        "type": "mqtt in",
        "z": "d7dab27f55a5d58b",
        "name": "Device Status",
        "topic": "device/+/status",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b5c44f3e0eefb409",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 200,
        "wires": [
            [
                "8217d61f3b18c5b0"
            ]
        ]
    },
    {
        "id": "bc1b3314b135b9e7",
        "type": "function",
        "z": "d7dab27f55a5d58b",
        "name": "Parse Status => WS",
        "func": "// payload: { type:'state'|'snapshot'|'ping', ... }\nconst retain = !!msg.retain;\nlet data = {};\ntry { data = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload; } catch { return null; }\nconst parts = (msg.topic || '').split('/');\nconst device_id = parts[1];\nif (!device_id) return null;\n\nconst now = new Date();\nconst set = { 'status.last_seen': now, updated_at: now };\nif (data.type === 'state') {\n    if (data.target && data.target.startsWith('led_')) {\n        set[`state.leds.${data.target}`] = (data.state === 'on');\n    }\n    if (data.target === 'servo_1' && Number.isFinite(+data.angle)) {\n        set['state.servo_1'] = +data.angle;\n    }\n    if (data.target === 'motor1' && data.state) {\n        set['state.motor1'] = (data.state === 'on');\n    }\n    set['state.updated_at'] = now;\n} else if (data.type === 'snapshot') {\n    if (data.leds) {\n        for (const k of Object.keys(data.leds)) {\n            set[`state.leds.${k}`] = !!data.leds[k];\n        }\n    }\n    if (Number.isFinite(+data.servo_1)) {\n        set['state.servo_1'] = +data.servo_1;\n    }\n    if (typeof data.motor1 === 'boolean') {\n        set['state.motor1'] = data.motor1;\n    }\n    set['state.updated_at'] = now;\n} else if (data.type === 'ping') {\n    // presenÃ§a apenas\n}\n\nmsg.collection = 'devices';\nmsg.operation = 'updateOne';\nmsg.payload = [\n    { device_id },\n    { $set: set, $setOnInsert: { created_at: now, device_id, _id: msg.payload._id } },\n    { upsert: true }\n];\nmsg._wsEvent = { kind: 'status', id: device_id, data, retain };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            [
                "e54a84efec4a1c08"
            ]
        ]
    },
    {
        "id": "8217d61f3b18c5b0",
        "type": "uuid",
        "z": "d7dab27f55a5d58b",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "bc1b3314b135b9e7"
            ]
        ]
    },
    {
        "id": "54903d41efbe07de",
        "type": "mqtt in",
        "z": "d7dab27f55a5d58b",
        "name": "Device Telemetry",
        "topic": "device/+/telemetry",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "b5c44f3e0eefb409",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "87cf79b1b41fddf8"
            ]
        ]
    },
    {
        "id": "87cf79b1b41fddf8",
        "type": "uuid",
        "z": "d7dab27f55a5d58b",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 310,
        "y": 280,
        "wires": [
            [
                "17a2ed8c651d58d9"
            ]
        ]
    },
    {
        "id": "17a2ed8c651d58d9",
        "type": "function",
        "z": "d7dab27f55a5d58b",
        "name": "Parse Telemetry => WS",
        "func": "let data = {}\ntry {\n    data = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n} catch {\n    return null;\n}\n\nconst device_id = (msg.topic || '').split(\"/\")[1];\nif (!device_id) return null;\n\nconst obj = {\n    _id: msg.payload._id,\n    device_id,\n    sensor: msg.payload.sensor || 'unknown',\n    unit: msg.payload.unit || null,\n    value: msg.payload.value || null,\n    created_at: new Date(msg.payload.ts || Date.now()),\n    source: 'telemetry'\n}\n\nconst reading = {\n    collection: 'readings',\n    operation: 'insertOne',\n    payload: obj\n}\n\nconst devices = {\n    collection: 'devices',\n    operation: 'updateOne',\n    payload: [\n        { device_id },\n        {\n            $set: { 'status.last_seen': new Date(), updated_at: new Date() },\n            $setOnInsert: { created_at: new Date(), device_id, _id: msg.payload._id }\n        },\n        { upsert: true }\n    ]\n}\n\nreturn [devices, reading];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "e54a84efec4a1c08"
            ],
            [
                "f167982de9680657"
            ]
        ]
    },
    {
        "id": "f167982de9680657",
        "type": "mongodb4",
        "z": "d7dab27f55a5d58b",
        "clientNode": "7b462fca6d72e984",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Readings",
        "x": 1320,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3adc02563c95714e",
        "type": "mqtt in",
        "z": "d7dab27f55a5d58b",
        "name": "Device ACK",
        "topic": "device/+/ack",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b5c44f3e0eefb409",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "474d2ef3fde1bca6"
            ]
        ]
    },
    {
        "id": "474d2ef3fde1bca6",
        "type": "function",
        "z": "d7dab27f55a5d58b",
        "name": "Parse ACK => Device State",
        "func": "const deviceId = msg.topic.split(\"/\")[1];\nif (!deviceId) return null;\nconst state = (msg.payload.state) ? { state: msg.payload.state } : { angle: +msg.payload.angle }\nconst msgCmd = {\n    collection: 'commands',\n    operation: \"updateOne\",\n    payload: [\n        { corr: msg.payload.corr },\n        {\n            $set: {\n                ack: {\n                    ts: new Date(),\n                    ok: msg.payload.ok,\n                    state_echo: state\n                },\n                status: msg.payload.ok ? 'executed' : 'failed',\n                error: msg.payload.ok ? 'ack not ok' : null\n            }\n        }\n    ]\n}\n\nconst set = {\n    status: {\n        last_seen: new Date(),\n        updated_at: new Date(),\n    }\n}\n\nif (msg.payload.action === 'set' && msg.payload.target) {\n    if (msg.payload.target.startsWith('led_') && msg.payload.state) {\n        set.state.leds[msg.payload.target] = (msg.payload.state === 'on')\n    }\n\n    if (msg.payload.target.startsWith('servo_1')) {\n        set.state[msg.payload.target] = +msg.payload.angle\n    }\n\n    if (msg.payload.target.startsWith('motor_1')) {\n        set.state[msg.payload.target] = (msg.payload.state === 'on')\n    }\n\n    set.state.updated_at = new Date();\n\n}\n\n\nreturn [set, msgCmd, null];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 360,
        "wires": [
            [
                "e54a84efec4a1c08"
            ],
            [
                "270bddd5f1281d17",
                "b8e294567e0a7dde"
            ],
            []
        ]
    },
    {
        "id": "270bddd5f1281d17",
        "type": "mongodb4",
        "z": "d7dab27f55a5d58b",
        "clientNode": "7b462fca6d72e984",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Commands",
        "x": 1330,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "e7a62466a01f5057",
        "type": "http in",
        "z": "137c847c0940eaf0",
        "name": "GET Devices",
        "url": "/api/devices",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "978a17884652ce1a"
            ]
        ]
    },
    {
        "id": "978a17884652ce1a",
        "type": "function",
        "z": "137c847c0940eaf0",
        "name": "Find All Devices",
        "func": "msg.collection = \"devices\";\nmsg.operation = \"find\";\nmsg.payload = [{}, { sort: { 'status.online': -1, device_id: 1 }}]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 60,
        "wires": [
            [
                "790adc744624909e"
            ]
        ]
    },
    {
        "id": "790adc744624909e",
        "type": "mongodb4",
        "z": "137c847c0940eaf0",
        "clientNode": "7b462fca6d72e984",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Devices",
        "x": 660,
        "y": 60,
        "wires": [
            [
                "3d4c5d98674bc01e"
            ]
        ]
    },
    {
        "id": "3d4c5d98674bc01e",
        "type": "http response",
        "z": "137c847c0940eaf0",
        "name": "REPLY",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "7ad7267de626dc95",
        "type": "http in",
        "z": "137c847c0940eaf0",
        "name": "POST Command",
        "url": "/api/devices/:id/cmd",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "a4848d092e66ac62"
            ]
        ]
    },
    {
        "id": "a1ee4b1e37242ed0",
        "type": "debug",
        "z": "137c847c0940eaf0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 780,
        "wires": []
    },
    {
        "id": "a4848d092e66ac62",
        "type": "uuid",
        "z": "137c847c0940eaf0",
        "uuidVersion": "v4",
        "namespaceType": "",
        "namespace": "",
        "namespaceCustom": "",
        "name": "",
        "field": "payload._id",
        "fieldType": "msg",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "724ece6846066445"
            ]
        ]
    },
    {
        "id": "724ece6846066445",
        "type": "function",
        "z": "137c847c0940eaf0",
        "name": "Create command",
        "func": "const deviceId = msg.req.params.id;\nconst command = msg.req.body;\n\nconst value = (typeof command.on === 'boolean') ? { on: command.on } : { angle: +command.angle };\n\nconst commandDb = {\n    _id: msg.payload._id,\n    device_id: deviceId,\n    target: command.target,\n    payload: value,\n    corr: command.corr,\n    request_by: 'dashboard',\n    request_at: new Date(),\n    ack: null,\n    status: 'sent',\n    delivery: {\n        sent_ts: new Date()\n    },\n    error: null\n}\nconst msgInsert = {\n    collection: \"commands\",\n    operation: \"insertOne\",\n    payload: [commandDb]\n}\n\nconst httpResponse = {\n    ...msg,\n    statusCode: 200,\n    payload: {\n        ok: true,\n        corr: commandDb.corr\n    }\n}\n\nconst publishMqtt = {\n    topic: `device/${deviceId}/cmd`,\n    payload: {\n        target: command.target,\n        ...value,\n        corr: command.corr\n    },\n    qos: 1,\n    retain: false\n}\nreturn [msgInsert, httpResponse, publishMqtt];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 180,
        "wires": [
            [
                "ad28cdb7678350bc"
            ],
            [
                "a99388e72fec3b69"
            ],
            [
                "a782233a70160de2"
            ]
        ]
    },
    {
        "id": "a99388e72fec3b69",
        "type": "http response",
        "z": "137c847c0940eaf0",
        "name": "REPLY",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 920,
        "y": 180,
        "wires": []
    },
    {
        "id": "ad28cdb7678350bc",
        "type": "mongodb4",
        "z": "137c847c0940eaf0",
        "clientNode": "7b462fca6d72e984",
        "mode": "collection",
        "collection": "",
        "operation": "",
        "output": "toArray",
        "maxTimeMS": "0",
        "handleDocId": false,
        "name": "Command",
        "x": 930,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "a782233a70160de2",
        "type": "mqtt out",
        "z": "137c847c0940eaf0",
        "name": "Send Command Device",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b5c44f3e0eefb409",
        "x": 970,
        "y": 220,
        "wires": []
    }
]